name: Deploy to AWS ECS (Fargate)

on:
  push:
    branches:
      - version2 # Trigger on push to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      - name: Download environment file from S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-2 # Change to your AWS region
        run: |
          aws s3 cp s3://medrag/env-file env-file

      - name: Build, tag, and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: chatmed/r2r-backend # Change to your ECR repository name
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update ECS Fargate service with new image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-2 # Change to your AWS region
          CLUSTER_NAME: ChatMed # Change to your ECS cluster name
          SERVICE_NAME: chatmed-r2r-backend # Change to your ECS service name
          TASK_FAMILY: chatmed-r2r-backend-task # Change to your task definition family name
          CONTAINER_NAME: r2r-backend # Change to your container name
          IMAGE_TAG: ${{ github.sha }}
          ENV_FILE_PATH: / # This will be used in the container setup
          ENV_FILE: env-file
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: chatmed/r2r-backend
        run: |
          # Fetch the current task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "$TASK_FAMILY" --region $AWS_REGION)
          
          if [ $? -ne 0 ]; then
            echo "Failed to fetch task definition. Creating a new one."
            TASK_DEFINITION=$(cat << EOF
          {
            "family": "$TASK_FAMILY",
            "containerDefinitions": [{
              "name": "$CONTAINER_NAME",
              "image": "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG",
              "essential": true,
              "portMappings": [{
                "containerPort": 80,
                "hostPort": 80
              }]
            }],
            "requiresCompatibilities": ["FARGATE"],
            "networkMode": "awsvpc",
            "cpu": "1024",
            "memory": "2048"
          }
          EOF
          )
          else
            # Update existing task definition
            TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" --arg ENV_FILE "$ENV_FILE_PATH" '.taskDefinition | 
            .containerDefinitions[0].image=$IMAGE | 
            .containerDefinitions[0].environment += [{"name": "ENV_FILE_PATH", "value": $ENV_FILE}] | 
            del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities)')
          fi
          
          # Register new task definition
          NEW_TASK_DEF=$(aws ecs register-task-definition --cli-input-json "$TASK_DEFINITION" --region $AWS_REGION)
          NEW_TASK_DEF_ARN=$(echo $NEW_TASK_DEF | jq -r '.taskDefinition.taskDefinitionArn')
          
          # Update ECS service to use the new task definition
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $NEW_TASK_DEF_ARN --force-new-deployment --region $AWS_REGION



